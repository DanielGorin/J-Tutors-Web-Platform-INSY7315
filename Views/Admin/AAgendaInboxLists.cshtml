@model J_Tutors_Web_Platform.ViewModels.AgendaInboxDisplayVM
@using Microsoft.AspNetCore.Html
@using System.Text
@using System.Linq
@{
    Layout = null;
}

@functions {
    private static string BadgeClass(string status) => status switch
    {
        "Requested" => "bg-warning text-dark",
        "Accepted" => "bg-success",
        "Paid" => "bg-primary",
        "Cancelled" => "bg-secondary",
        _ => "bg-light text-dark"
    };

    public static IHtmlContent RenderGroup(
        string title,
        IEnumerable<J_Tutors_Web_Platform.ViewModels.AgendaInboxRowVM> rows)
    {
        var list = rows ?? Enumerable.Empty<J_Tutors_Web_Platform.ViewModels.AgendaInboxRowVM>();
        var c = list.Count();
        var sb = new StringBuilder();

        sb.Append($@"<div class=""mb-3""><h6 class=""mb-2"">{title} ({c})</h6>");

        if (c == 0)
        {
            sb.Append(@"<div class=""text-muted"">none</div></div>");
            return new HtmlString(sb.ToString());
        }

        sb.Append(@"<ul class=""list-group"">");
        foreach (var s in list)
        {
            var badge = BadgeClass(s.Status);
            var priceR = (s.PriceRand < 0 ? 0 : s.PriceRand).ToString("0.00");

            sb.Append($@"
<li class=""list-group-item"" data-session-id=""{s.TutoringSessionID}"">
  <div class=""item-line d-flex justify-content-between align-items-center gap-2"">
    <div class=""item-left d-flex flex-wrap align-items-center"" style=""gap:.75rem 1.25rem;"">
      <span class=""chip"" style=""border:1px solid var(--border-color); border-radius:999px; padding:.15rem .6rem; background:transparent; color:var(--text-color);"">{s.SubjectName}</span>
      <span class=""text-muted"">{s.DurationHours:0.##}h</span>
      <span>{s.RequestingFullName}</span>
    </div>
    <div class=""d-flex align-items-center gap-2"">
      <span class=""price"" style=""min-width:9rem; text-align:right; font-variant-numeric:tabular-nums;"">R {priceR}</span>
      <span class=""text-muted small"">({s.PricePoints} pts)</span>
      <span class=""badge {badge}"">{s.Status}</span>
    </div>
  </div>
</li>");
        }
        sb.Append("</ul></div>");
        return new HtmlString(sb.ToString());
    }
}

@RenderGroup("Requested", Model?.Requested)
@RenderGroup("Accepted", Model?.Accepted)
@RenderGroup("Paid", Model?.Paid)
@RenderGroup("Cancelled", Model?.Cancelled)

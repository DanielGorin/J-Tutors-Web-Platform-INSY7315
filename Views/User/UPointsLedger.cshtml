@using J_Tutors_Web_Platform.Models.Points
@model IEnumerable<J_Tutors_Web_Platform.Models.Points.PointsReceipt>

@{
    ViewData["Title"] = "Points & Receipts";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["NavSection"] = "User";

    int totalEarned = ViewBag.TotalEarned ?? 0;
    int totalDeducted = ViewBag.TotalDeducted ?? 0;
    int balance = ViewBag.CurrentBalance ?? 0;

    // helper to choose earn/deduct styling by amount sign
    string CardClass(PointsReceipt r) => (r.Amount >= 0) ? "receipt-earn" : "receipt-deduct";
    string AmountClass(PointsReceipt r) => (r.Amount >= 0) ? "amount-positive" : "amount-negative";
    string ChipClass(PointsReceipt r) => (r.Amount >= 0) ? "chip chip-earn" : "chip chip-deduct";
    string ChipText(PointsReceipt r) => (r.Amount >= 0) ? "Earn" : "Deduct";
}

<style>
    .points .form-control, .points select {
        background-color: var(--surface-color) !important;
        color: var(--text-color) !important;
        border: 1px solid var(--border-color) !important;
        border-radius: 8px !important;
        padding: 10px 12px !important;
        width: 100%;
    }

        .points .form-control::placeholder {
            color: var(--muted-text-color) !important;
        }

        .points .form-control:focus, .points select:focus {
            outline: none !important;
            border-color: var(--primary-color) !important;
            box-shadow: 0 0 0 0.15rem var(--accent-color) !important;
        }

    /* Receipt cards */
    .points .receipt-card {
        border-left: 4px solid var(--border-color);
        background-color: var(--surface-color);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        padding: 16px;
        margin-bottom: 12px;
    }

    .points .receipt-earn {
        border-left-color: var(--success-color);
    }

    .points .receipt-deduct {
        border-left-color: var(--error-color);
    }

    .points .amount-positive {
        color: var(--success-color);
        font-weight: 700;
    }

    .points .amount-negative {
        color: var(--error-color);
        font-weight: 700;
    }

    .points .chip {
        display: inline-block;
        padding: 4px 10px;
        border-radius: 999px;
        font-size: 12px;
        border: 1px solid var(--border-color);
        margin-left: 8px;
    }

    .points .chip-earn {
        border-color: var(--success-color);
        color: var(--success-color);
    }

    .points .chip-deduct {
        border-color: var(--error-color);
        color: var(--error-color);
    }

    .points .caption {
        color: var(--muted-text-color);
    }
</style>

<div class="points">

    <!-- Header / Nav -->
    <div class="d-flex justify-content-between align-items-center mb-16">
        <h1 class="mb-0">Points &amp; Receipts</h1>
        <div class="d-flex gap-2">
            <a asp-controller="Home" asp-action="UDashboard" class="btn btn-secondary">← Back to Dashboard</a>
        </div>
    </div>

    <!-- Ledger summary -->
    <div class="card shadow p-24 mb-16">
        <div class="row">
            <div class="col-md-4 mb-8">
                <div class="d-flex justify-content-between">
                    <div>Total Earned</div><strong>@totalEarned</strong>
                </div>
            </div>
            <div class="col-md-4 mb-8">
                <div class="d-flex justify-content-between">
                    <div>Total Deducted</div><strong>@totalDeducted</strong>
                </div>
            </div>
            <div class="col-md-4 mb-8">
                <div class="d-flex justify-content-between">
                    <div>Current Balance</div><strong>@balance</strong>
                </div>
            </div>
        </div>
        <div class="caption mt-8">
            Newest transactions appear first. Positive amounts are points earned; negative amounts are deductions.
        </div>
    </div>

    <!-- Receipts list (cards) -->
    <div>
        @if (Model == null || !Model.Any())
        {
            <div class="receipt-card shadow d-flex justify-content-between align-items-start">
                <div>
                    <div class="caption">Date: —</div>
                    <div class="mt-8">No point transactions to display yet.</div>
                </div>
            </div>
        }
        else
        {
            foreach (var r in Model)
            {
                <div class="receipt-card @CardClass(r) shadow">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <div class="caption">
                                Date: @r.ReceiptDate.ToString("yyyy-MM-dd HH:mm")
                            </div>

                            @if (!string.IsNullOrWhiteSpace(r.Reason))
                            {
                                <div class="mt-8"><strong>Justification:</strong> @r.Reason</div>
                            }
                            else
                            {
                                <div class="mt-8"><strong>Justification:</strong> —</div>
                            }

                            <div class="caption mt-8">
                                Reference: @(string.IsNullOrWhiteSpace(r.Reference) ? "—" : r.Reference)
                            </div>
                        </div>

                        <div class="text-end">
                            <div class="@AmountClass(r)">@((r.Amount >= 0 ? "+" : "") + r.Amount)</div>
                            <span class="@ChipClass(r)">@ChipText(r)</span>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- (Optional) Pagination placeholder if you later add paging -->
    <div class="d-flex justify-content-between align-items-center mt-16">
        <div class="caption text-muted">
            @((Model?.Count() ?? 0) == 0 ? "Showing 0 of 0" : $"Showing {(Model?.Count() ?? 0)} item(s)")
        </div>
        <div>
            <button class="btn btn-outline-secondary btn-sm" disabled>Previous</button>
            <button class="btn btn-outline-secondary btn-sm" disabled>Next</button>
        </div>
    </div>
</div>

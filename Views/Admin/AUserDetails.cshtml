@model J_Tutors_Web_Platform.ViewModels.AdminUserDetailsViewModel
@{
    ViewData["Title"] = "User Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["NavSection"] = "Admin";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1 class="mb-0">User Details</h1>
    <div class="d-flex gap-2">
        <a class="btn btn-secondary"
           asp-controller="AdminUserDirectory"
           asp-action="Index">← Back to Directory</a>
    </div>
</div>

<!-- Points Snapshot -->
<div class="card shadow p-3 mb-4">
    <h3 class="mb-3">Points Snapshot</h3>
    <div class="row">
        <div class="col-md-4 mb-2">
            <div class="d-flex justify-content-between">
                <div>Total (All-Time)</div><strong id="ptotal">@Model.PointsTotal</strong>
            </div>
        </div>
        <div class="col-md-4 mb-2">
            <div class="d-flex justify-content-between">
                <div>Current Balance</div><strong id="pcurrent">@Model.PointsCurrent</strong>
            </div>
        </div>
        <div class="col-md-4 mb-2">
            <div class="d-flex justify-content-between text-muted">
                <div>User ID</div><span>@Model.UserID</span>
            </div>
        </div>
    </div>
</div>

<!-- Profile (read-only mirror of UProfile's overview) -->
<div class="card shadow p-3">
    <h3 class="mb-3">Account Overview</h3>
    <div class="row g-3">
        <div class="col-md-6">
            <label class="form-label">First Name</label>
            <input class="form-control" value="@Model.FirstName" readonly />
        </div>
        <div class="col-md-6">
            <label class="form-label">Surname</label>
            <input class="form-control" value="@Model.Surname" readonly />
        </div>
        <div class="col-md-6">
            <label class="form-label">Username</label>
            <input class="form-control" value="@Model.Username" readonly />
        </div>
        <div class="col-md-6">
            <label class="form-label">Email</label>
            <input class="form-control" value="@(Model.Email ?? "—")" readonly />
        </div>
        <div class="col-md-6">
            <label class="form-label">Phone</label>
            <input class="form-control" value="@(Model.Phone ?? "—")" readonly />
        </div>
        <div class="col-md-6">
            <label class="form-label">Subject Interest</label>
            <input class="form-control" value="@(Model.SubjectInterest ?? "—")" readonly />
        </div>
        <div class="col-md-6">
            <label class="form-label">Birth Date</label>
            <input class="form-control" value="@(Model.BirthDate?.ToString("yyyy-MM-dd") ?? "—")" readonly />
        </div>
        <div class="col-md-6">
            <label class="form-label">Registration Date</label>
            <input class="form-control" value="@(Model.RegistrationDate?.ToString("yyyy-MM-dd") ?? "—")" readonly />
        </div>
        <div class="col-md-6">
            <label class="form-label">Theme Preference</label>
            <input class="form-control" value="@(Model.ThemePreference ?? "—")" readonly />
        </div>
        <div class="col-md-6">
            <label class="form-label">Leaderboard Visible</label>
            <input class="form-control" value="@(Model.LeaderboardVisible ? "Visible" : "Hidden")" readonly />
        </div>
    </div>
</div>

<!-- Adjust Points (Admin) -->
<div class="card shadow p-3 mt-4">
    <h3 class="mb-3">Adjust Points (Admin)</h3>

    <div id="adjustAlert" class="alert d-none" role="alert"></div>

    <form id="adjustForm" method="post">
        @Html.AntiForgeryToken()

        <input type="hidden" id="UserId" name="UserId" value="@Model.UserID" />

        <div class="row g-3">
            <div class="col-md-3">
                <label for="Amount" class="form-label">Amount (positive = grant, negative = remove)</label>
                <input id="Amount" name="Amount" type="number" step="1" class="form-control" required />
            </div>

            <div class="col-md-3">
                <label for="Reason" class="form-label">Reason (optional)</label>
                <input id="Reason" name="Reason" type="text" class="form-control" maxlength="200" />
            </div>

            <div class="col-md-3">
                <label for="Reference" class="form-label">Reference (optional)</label>
                <input id="Reference" name="Reference" type="text" class="form-control" maxlength="100" />
            </div>
        </div>

        <div class="mt-3 d-flex gap-2">
            <button id="btnAdjust" type="submit" class="btn btn-primary">Apply Adjustment</button>
            <button type="button" class="btn btn-outline-success"
                    onclick="document.getElementById('Amount').value = Math.abs(parseInt(document.getElementById('Amount').value || '0')) || '';">
                Make Positive
            </button>
            <button type="button" class="btn btn-outline-danger"
                    onclick="document.getElementById('Amount').value = -Math.abs(parseInt(document.getElementById('Amount').value || '0')) || '';">
                Make Negative
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        (function () {
            const form = document.getElementById('adjustForm');
            const alertBox = document.getElementById('adjustAlert');
            const pTotal = document.getElementById('ptotal');
            const pCurrent = document.getElementById('pcurrent');

            function showAlert(kind, message) {
                alertBox.classList.remove('d-none', 'alert-success', 'alert-danger');
                alertBox.classList.add(kind === 'ok' ? 'alert-success' : 'alert-danger');
                alertBox.textContent = message;
            }

            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                const amountVal = parseInt(document.getElementById('Amount').value, 10);
                if (!Number.isInteger(amountVal) || amountVal === 0) {
                    showAlert('err', 'Please enter a non-zero integer amount.');
                    return;
                }

                const fd = new FormData(form); // includes __RequestVerificationToken from the form

                try {
                    const res = await fetch('/Points/adjust', {
                        method: 'POST',
                        credentials: 'same-origin', // ensure auth cookies flow
                        body: fd
                    });

                    if (!res.ok) {
                        let msg = 'Adjustment failed.';
                        try {
                            const data = await res.json();
                            if (typeof data?.message === 'string') msg = data.message;
                        } catch { }
                        showAlert('err', msg);
                        return;
                    }

                    const data = await res.json(); // { ok, pointsReceiptId, total, current }
                    if (data?.ok) {
                        if (typeof data.total === 'number') pTotal.textContent = data.total;
                        if (typeof data.current === 'number') pCurrent.textContent = data.current;

                        showAlert('ok', `Adjustment saved. Receipt #${data.pointsReceiptId}.`);
                        form.reset();
                    } else {
                        showAlert('err', data?.message || 'Adjustment failed.');
                    }
                } catch (err) {
                    showAlert('err', 'Network error while saving adjustment.');
                }
            });
        })();
    </script>
}

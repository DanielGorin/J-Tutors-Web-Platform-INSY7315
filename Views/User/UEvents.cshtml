@model J_Tutors_Web_Platform.ViewModels.EventViewModel
@using J_Tutors_Web_Platform.Models.Shared

@{
    ViewData["Title"] = "New Events";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["NavSection"] = "User";
}

<!-- Scoped styles for UEvents only -->
<style>
    .uevents .form-control, .uevents select {
        background-color: var(--surface-color) !important;
        color: var(--text-color) !important;
        border: 1px solid var(--border-color) !important;
        border-radius: 8px !important;
        padding: 10px 12px !important;
        width: 100%;
    }

        .uevents .form-control::placeholder {
            color: var(--muted-text-color) !important;
        }

        .uevents .form-control:focus, .uevents select:focus {
            outline: none !important;
            border-color: var(--primary-color) !important;
            box-shadow: 0 0 0 0.15rem var(--accent-color) !important;
        }

    /* Status chips */
    .uevents .chip {
        display: inline-block;
        padding: 4px 12px;
        border-radius: 999px;
        font-size: 12px;
        border: 1px solid var(--border-color);
        margin-right: 8px;
        margin-bottom: 8px;
    }

    .uevents .chip-available {
        color: var(--success-color);
        border-color: var(--success-color);
    }

    .uevents .chip-participating {
        color: var(--info-color);
        border-color: var(--info-color);
    }

    .uevents .chip-full {
        color: var(--error-color);
        border-color: var(--error-color);
    }

    .uevents .chip-unavailable {
        color: var(--warning-color);
        border-color: var(--warning-color);
    }

    /* Meta list */
    .uevents .meta {
        display: flex;
        gap: 16px;
        flex-wrap: wrap;
    }

    .uevents .meta-item {
        font-size: 14px;
        color: var(--muted-text-color);
    }

    /* Card spacing */
    .uevents .event-card {
        height: 100%;
    }

    .uevents .event-actions .btn {
        min-width: 120px;
    }

    /* Dark-mode legibility (view-scoped) */
    .uevents, .uevents .card {
        color: var(--text-color) !important;
    }

        .uevents .text-muted, .uevents .caption {
            color: var(--muted-text-color) !important;
        }
</style>

<div class="uevents">

    <!-- Header / Nav -->
    <div class="d-flex justify-content-between align-items-center mb-16">
        <h1 class="mb-0">New Events</h1>
        <a asp-controller="Home" asp-action="Dashboard" class="btn btn-secondary">← Back to Dashboard</a>
    </div>

    <!-- Controls: Search & Filters -->
    <div class="card shadow p-24 mb-16">
        <div class="row g-3">
            <div class="col-md-6">
                <label for="searchEvents" class="form-label">Search events</label>
                <input id="searchEvents" type="text" class="form-control" placeholder="Search by title, description, or location" />
            </div>
            <div class="col-md-3">
                <label for="sortEvents" class="form-label">Sort by</label>
                <select id="sortEvents" class="form-select">
                    <option value="date">Date</option>
                    <option value="points">Points Reward</option>
                    <option value="duration">Duration</option>
                </select>
            </div>
            <div class="col-md-3 d-flex align-items-end">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="onlyAvailable" />
                    <label class="form-check-label" for="onlyAvailable">Show only available</label>
                </div>
            </div>
        </div>
    </div>

    <!-- ======= PAST TAB (UI only, shown for completeness) ======= -->
    <div class="card shadow p-24 mb-16">
        <div class="table-responsive">
            <table class="table align-middle">
                <thead>
                    <tr>
                        <th>Event</th>
                        <th>Date</th>
                        <th>Ended</th>
                        <th>Location</th>
                        <th>Participants</th>
                        <th>Points</th>
                        <th>Status</th>
                        <th class="text-end">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @* ========== Upcoming events a user can attend ========== *@
                    @if (Model != null)
                    {
                        @foreach (var evnt in Model.DetailedEventRows)
                        {
                            @if ((evnt.EventDate >= DateOnly.FromDateTime(DateTime.Now)) && (evnt.GoalParticipants > evnt.CurrentParticipants) && (evnt.Status == EventStatus.Published))
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex flex-column">
                                            <strong>@evnt.Title</strong>
                                        </div>
                                        <div
                                            class="caption">@evnt.Description</div>
                                    </td>
                                    <td>@evnt.EventDate</td>
                                    <td>@evnt.StartTime</td>
                                    <td>@evnt.DurationMinutes minutes</td>
                                    <td>@evnt.Location</td>
                                    <td>Goal @evnt.GoalParticipants · Current @evnt.CurrentParticipants</td>
                                    <td>@evnt.PointsReward</td>
                                    @if (evnt.Status == EventStatus.Cancelled)
                                    {
                                        <td><span class="chip chip-unavailable">Cancelled</span></td>
                                    }
                                    @if (evnt.Status == EventStatus.Completed)
                                    {
                                        <td><span class="chip chip-unavailable">Ended</span></td>
                                    }
                                    @if (evnt.Status == EventStatus.Published)
                                    {
                                        <td><span class="chip chip-available">Open</span></td>
                                    }
                                    @if (evnt.Status == EventStatus.Draft)
                                    {
                                        <td><span class="chip chip-unavailable">Draft</span></td>
                                    }
                                    <td class="text-end">
                                        <form asp-action="JoinEvent" asp-controller"">
                                            <input type="hidden" value="@evnt.EventID" id="EventID" name="EventID" />
                                            <button class="btn btn-sm btn-outline-primary">Join</button> @*= non functional =*@
                                        </form> 
                                    </td>
                                </tr>
                            }
                        }
                    }
                    @* ============================================================ *@
                </tbody>
            </table>
        </div>
    </div>
</div>

@* --------------------------------------------------------------------
   TODO: Enable UEvents Functionality
   - Bind upcoming events and compute status per event
   - Show proper actions per status (Apply / Leave / disabled)
   - Implement search/sort/filters and wire Apply/Leave later
--------------------------------------------------------------------- *@
